// =================================
// WHITESPACE and COMMENTS
// =================================
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT    = _{ "#" ~ (!"\n" ~ ANY)* ~ "\n" }
NEWLINE = { "\n" | "\r\n" }

// =================================
// CORE TYPES
// =================================
identifier   = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
number       = @{ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }
string       =  { "\"" ~ string_value ~ "\"" }
string_value = @{ (!("\"" | "@" | "/") ~ ANY)* }

// =================================
// DOCUMENT STRUCTURE
//
// Setup: Specify document metadata such as title, author, etc. 
// Also any Python blocks
// Document: For rendering to LaTeX
// =================================
file = { SOI ~ setup_block ~ document_block ~ EOI }

setup_block    = {
    "begin(setup)" ~ setup_content* ~ python_block? ~ "end(setup)"
}
python_block = {
    "begin(python)" ~ NEWLINE? ~ python_content ~ NEWLINE? ~ "end(python)"
}
document_block = {
    "begin(document)" ~ document_content* ~ "end(document)"
}

// ==================================
// DOCUMENT METADATA
//
// TODO: Add use_options and expand document_class
// ==================================
document_class = { "documentclass" ~ "(" ~ string ~ ")" }
title          = { "title" ~ "(" ~ string ~ ")" }
author         = { "author" ~ "(" ~ author_list ~ ")" }
author_list    = { string ~ ("," ~ string)* }

// =================================
// CONTENT TYPES
//
// TODO: Support for other languages
// =================================
setup_content = _{
    document_class
  | title
  | author
}

// TODO: Expand to only allow proper Pythonic grammar
python_content = @{ (!("end(python)") ~ ANY)* }

document_content = _{
    inline_math_expr
  | newline_math_expr
  | code_output
  | text
}

// ====================================================
// MATH EXPRESSIONS (with operation precedence)
//
// NOTE: This is for rendering within the document block!
// TODO: Possibly expand into its own system
// =====================================================

text              = { (!("$(" | "$$(" | ">(" | "begin(" | "end(") ~ ANY)+ ~ NEWLINE? }
inline_math_expr  = { "$" ~ "(" ~ math_content ~ ")" }
newline_math_expr = { "$$" ~ "(" ~ math_content ~ ")" }

// TODO: Make sure only valid Python code in between >(...) 
code_output = { ">" ~ "(" ~ allowed_python_code_in_document ~ ")" }

allowed_python_code_in_document = {
    ( !import_or_class_statement ~ ( method_call | function_call | identifier | code_line ) )*
}

import_or_class_statement = _{
    "import" ~ WHITESPACE | 
    "from" ~ WHITESPACE |
    "class" ~ WHITESPACE
}

code_line = _{
    !(import_or_class_statement) ~ (!")" ~ ANY)+ ~ NEWLINE?
}

function_call = { identifier ~ "(" ~ arg_list? ~ ")" }
arg_list = { expression ~ ("," ~ expression)* }

method_call = { identifier ~ ("." ~ identifier)+ ~ "(" ~ arg_list? ~ ")" }


/////////////////
math_content = _{ expression }

expression = _{ sum_expression }

sum_expression = { product_expression ~ (add_op ~ product_expression)* }

product_expression = { power_expression ~ (mul_op ~ power_expression)* }

power_expression = { primary_expression ~ ("^" ~ power_expression)? }

primary_expression = {
    integral | 
    fraction | 
    sum | 
    limit | 
    matrix |
    variable_usage | 
    parenthesized_expression |
    number | 
    identifier |
    single_variable_usage
}

add_op = { "+" | "-" }
mul_op = { "*" | "/" }

parenthesized_expression = { "(" ~ expression ~ ")" }

// ==========================================================================================
// MATRIX DEFINITIONS
//
// Note: They need their own section because the rendering logic is different from other maths
// ===========================================================================================
// matrix          = { identifier ~ "=" ~ "[" ~ matrix_rows ~ "]" }
// matrix_rows     = { matrix_row+ ~ ("," ~ matrix_row)* }
// matrix_row      = { "[" ~ matrix_elements ~ "]" }
// matrix_elements = { matrix_element ~ ("," ~ matrix_element)* }
// matrix_element  = { number | identifier }

matrix    = { "matrix" ~ matrix_modifier? ~ identifier ~ matrix_style? }
matrix_modifier = { "transpose" | "inverse" }
matrix_style    = { string }

// ===============================
// MATH OPERATIONS
// ===============================

integral = { "integral" ~ range? ~ expression ~ differential? }
differential = { ("d" ~ identifier) }

range    = { "(" ~ expression ~ "->" ~ expression ~ ")" }

sum = { "sum" ~ range? ~ expression }

fraction          = { "fraction" ~ fraction_modifier? ~ expression ~ expression? }
fraction_modifier = { "del" }

limit = { "limit" ~ range? ~ expression }

variable_usage = { "\\" ~ identifier }
single_variable_usage = { identifier }

//=======================================
// TODO: Add support for easy table rendering
//
//========================================